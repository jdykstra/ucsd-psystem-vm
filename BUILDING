Build VM using original build system:

	./configure CFLAGS="-g -O2 -std=c99 -pedantic-errors -D_POSIX_C_SOURCE=2 -D_DEFAULT_SOURCE"
	make

Or using meson:

	meson setup --buildtype=debugoptimized build/
	meson compile -C build/

I think most/all of the rest of the projects are in c++, so some of these configure options probably only apply to VM.

The user shouldn't have to manually set CFLAGS like this just to get things to compile.  If we had a configure.in file, the AC_PROC_CC_STDC macro would set the -std macro.

Tests require ucsdpsys_compile.

VM requires the libncurses5-dev, but configure doesn't check for it.  (Actually, it does contain ncurses code, but for some reason it didn't complain when the library wasn't present.  Need to investigate more.)  Also need libx11-dev and libxt-dev, libpng-dev, zlib1g-dev, flex, bison, libexplain-dev

The git tags indicate which distributions have been verified.

disk-images/ contains two UCSD P-System disk images that run on the VM.  Peter Miller included these in his ucsd-psystem-os project, but they are included here to make this project self-sufficient.



Peter Miller's BUILDING text
----------------------------

Build(ucsd-psystem-vm)                                  Build(ucsd-psystem-vm)



NAME
        How to build ucsd-psystem-vm

BEFORE YOU START
        There are a few pieces of software you may want to fetch and install
        before you proceed with your installation of ucsd-psystem-vm.

        curses  This is a library for controlling and updating text consoles.
                It is used by ucsd-psystem-vm to translate the cursor escape
                sequences into whatever escape sequences are used by your text
                consol, or terminal emulator.  These days, most systems use
                "ncurses" instead.  On a package based system, the package is
                called "libncurses-dev, "libncurses-devel, or something very
                similar.

        libexplain
                The ucsd-psystem-vm package depends on the libexplain package,
                a library of system-call-specific strerror(3) replacements.
                http://libexplain.sourceforge.net/

        X11     The ucsd-psystem-vm package depends on the X11 libraries, in
                order to emulate Turtle Graphics.  Only the core functionality
                and Xt widgets are used.

        GNU Groff
                The documentation for the ucsd-psystem-vm package was prepared
                using the GNU Groff package (version 1.14 or later).  This
                distribution includes full documentation, which may be
                processed into PostScript or DVI files at install time - if
                GNU Groff has been installed.

        ucsd-psystem-xc (>= 0.8)
                Cross compiler for UCSD Pascal, so that you don't need a
                working system in order to make a working system.  You need
                this project in order to run the test suite; it is used to
                compile short test programs to be run on the virtual machine.
                http://ucsd-psystem-xc.sourceforge.net/

        ucsd-psystem-fs (>= 1.15)
                File system tools for UCSD Pascal, allows you to create and
                manipulate UCSD Pascal disk images.  You need this project in
                order to run the test suite; it is used to construct disk
                images containing test programs to be run by the virtual
                machine.
                http://ucsd-psystem-fs.sourceforge.net/

        ucsd-psystem-um
                This is optional.  User Manual for UCSD Pascal II.0,
                reconstructed as HTML pages, and also as PDF.  A facsimile of
                the original scanned pages is also available, cleaned and
                aligned.  You do not need this project in order to build the
                ucsd-psystem-vm project.
                http://miller.emu.id.au/pmiller/ucsd-psystem-um/

SITE CONFIGURATION
        The ucsd-psystem-vm package is configured using the configure program
        included in this distribution.

        The configure shell script attempts to guess correct values for
        various system-dependent variables used during compilation, and
        creates the Makefile and lib/config.h files.  It also creates a shell
        script config.status that you can run in the future to recreate the
        current configuration.

        Normally, you just cd to the directory containing ucsd-psystem-vm's
        source code and then type

                $ ./configure
                ...lots of output...
                $

        Running configure takes a few seconds.  While it is running, it prints
        some messages that tell what it is doing.  If you don't want to see
        the messages, run configure using the quiet option; for example,

                $ ./configure --quiet
                $

        To compile the ucsd-psystem-vm package in a different directory from
        the one containing the source code, you must use a version of make
        that supports the VPATH variable, such as GNU make.  Change directory
        to the directory where you want the object files and executables to go
        and run the configure script.  The configure script automatically
        checks for the source code in the directory that configure is in and
        in .. (the parent directory).  If for some reason configure is not in
        the source code directory that you are configuring, then it will
        report that it can't find the source code.  In that case, run
        configure with the option --srcdir=DIR, where DIR is the directory
        that contains the source code.

        By default, configure will arrange for the make install command to
        install the ucsd-psystem-vm package's files in /usr/local/bin, and
        /usr/local/man.  There are options which allow you to control the
        placement of these files.

        --prefix=PATH
                This specifies the path prefix to be used in the installation.
                Defaults to /usr/local unless otherwise specified.

        --exec-prefix=PATH
                You can specify separate installation prefixes for
                architecture-specific files files.  Defaults to ${prefix}
                unless otherwise specified.

        --bindir=PATH
                This directory contains executable programs.  On a network,
                this directory may be shared between machines with identical
                hardware and operating systems; it may be mounted read-only.
                Defaults to ${exec_prefix}/bin unless otherwise specified.

        --mandir=PATH
                This directory contains the on-line manual entries.  On a
                network, this directory may be shared between all machines; it
                may be mounted read-only.  Defaults to ${prefix}/man unless
                otherwise specified.

        The configure script ignores most other arguments that you give it;
        use the --help option for a complete list.

        On systems that require unusual options for compilation or linking
        that the ucsd-psystem-vm package's configure script does not know
        about, you can give configure initial values for variables by setting
        them in the environment.  In Bourne-compatible shells, you can do that
        on the command line like this:

                $ CC='gcc -traditional' LIBS=-lposix ./configure
                ...lots of output...
                $

        Here are the make variables that you might want to override with
        environment variables when running configure.

        Variable: CC
                C compiler program.  The default is c++.

        Variable: CPPFLAGS
                Preprocessor flags, commonly defines and include search paths.
                Defaults to empty.  It is common to use
                CPPFLAGS=-I/usr/local/include to access other installed
                packages.

        Variable: INSTALL
                Program to use to install files.  The default is install if
                you have it, cp otherwise.

        Variable: LIBS
                Libraries to link with, in the form -lfoo -lbar.  The
                configure script will append to this, rather than replace it.
                It is common to use LIBS=-L/usr/local/lib to access other
                installed packages.

        If you need to do unusual things to compile the package, the
        maintainer encourages you to figure out how configure could check
        whether to do them, and mail diffs or instructions to the maintainer
        so that they can be included in the next release.

BUILDING UCSD-PSYSTEM-VM
        All you should need to do is use the following command, and wait:

                $ make
                ...lots of output...
                $

        When this finishes you should see a directory called bin containing
        several programs.

        If you have GNU Groff installed, the build will also create a
        etc/reference.ps file.  This contains the README file, this BUILDING
        file, and all of the man pages.

        You can remove the program binaries and object files from the source
        directory by using the following command:

                $ make clean
                ...lots of output...
                $

        To remove all of the above files, and also remove the Makefile and
        lib/config.h and config.status files, use the following command:

                $ make distclean
                ...lots of output...
                $

        The file etc/configure.in is used to create configure by a GNU program
        called autoconf.  You only need to know this if you want to regenerate
        configure using a newer version of autoconf.

TESTING UCSD-PSYSTEM-VM
        The ucsd-psystem-vm package comes with a test suite.  To run this test
        suite, use the following command:

                $ make sure
                ...lots of output...
                Passed All Tests
                $

        The tests take a few seconds each, with a few very fast, and a couple
        very slow, but it varies greatly depending on your CPU.

        If all went well, the message

                Passed All Tests

        should appear at the end of the make.

INSTALLING UCSD-PSYSTEM-VM
        As explained in the SITE CONFIGURATION section, above, the ucsd-
        psystem-vm package is installed under the /usr/local tree by default.
        Use the --prefix=PATH option to configure if you want some other path.
        More specific installation locations are assignable, use the --help
        option to configure for details.

        All that is required to install the ucsd-psystem-vm package is to use
        the following command:

                $ sudo make install
                Password:
                ...lots of output...
                $

        Control of the directories used may be found in the first few lines of
        the Makefile file and the other files written by the configure script;
        it is best to reconfigure using the configure script, rather than
        attempting to do this by hand.

        If you don't have the sudo(8) command installed on your system, the
        install looks like this

                $ su
                Password:
                # make install
                ...lots of output...
                # exit
                $

GETTING HELP
        If you need assistance with the ucsd-psystem-vm package, please do not
        hesitate to contact the maintainer at
                Peter Miller <pmiller@opensource.org.au>
        Any and all feedback is welcome.

        When reporting problems, please include the version number given by
        the following command:
                $ ucsdpsys_vm --version
                ucsdpsys_vm version 0.D010
                ...warranty disclaimer...
                $

        Please do not send this example; run the program for the exact version
        number.

COPYRIGHT
        ucsd-psystem-vm version 0
        Copyright (C) 2000, 2001 Mario Klebsch
        Copyright (C) 2006, 2009, 2010 Peter Miller

        The ucsd-psystem-vm programs come with ABSOLUTELY NO WARRANTY.  This
        is free software and you are welcome to redistribute it under certain
        conditions.  For details see the ucsdpsys_vm_license(1) man page.

AUTHOR
        Mario Klebsch   E-Mail:   mario@klebsch.de
                           WWW:   http://www.klebsch.de/

MAINTAINER
        Peter Miller   E-Mail:   pmiller@opensource.org.au
        /\/\*             WWW:   http://miller.emu.id.au/pmiller/



Reference Manual                ucsd-psystem-vm         Build(ucsd-psystem-vm)
